>>> 병원IT파트 <<<
Framework 기술 전문성에 기반한 오류 사전 예방 및 안정화 

다윈 Framework 관점의 장애 예방활동
- C언어 구조상 누락될 수 있는 오류를 선제적으로 식별하고 제거하여 운영 긴급 배포 발생률을 최소화하고 전반적인 품질 관리 체계 고도화
- GNU Debugger(GDB) 기반 오브젝트 파일 분석과 UI 자동 점검 도구를 활용해 상시 및 일괄 점검 투트랙 체계로 배포 전 오류 진단 및 장애 사전 예방 

장애예방배경: 
- 다윈 서버 프로그램은 C언어에 기반한 Anyframe C Framework로 개발되어 있음 
- C언어의 전처리 구조 특성상 일부 오류가 컴파일 단계에서 검출되지 않음
- 해당 오류는 실행 시점에서만 발견되어 치명적이고 장애 탐지 및 조치가 지연되는 문제 발생

목적: 
- 배포 전 단계에서 잠재적 오류를 식별해 장애 발생 가능성 사전 제거
- 조치를 위한 긴급 배포 횟수를 감소시켜 운영 효율성 및 서비스 신뢰성 강화
- 개발 품질 향상 및 배포 안정화 달성

방법:
- GDB 기능으로 배포 전 오브젝트 파일을 분석해 에러 발생 가능 여부를 사전에 진단
- UI 기반 자동 점검 도구로 배포 문서 단위 분석과 결과 확인을 신속하게 수행
- 개발자 별 상시 점검 + 정기 배포 전 일괄 점검의 투트랙 관리 체계로 장애 예방 강화

성과:
25.3 GDB 기반 사전 점검 체계 도입 후 월별 전처리 관련 에러 예방률 100% 달성 

다윈 Framework 관점 릴리스 후 장애
1) 장애 유형
- 전문 구조 변경 시 연관된 필수 릴리스 프로그램 누락
- 전문 구조 변경 시 고정전문(FIXED),JSON 등 인터페이스 업체 공유 누락
- 개발 중인 프로그램의 호출, 피호출 프로그램들의 테스트↔운영 형상 불일치로 인한 호출 에러

전문구조 변경시 릴리스 누락
1) 릴리스 누락?
- 전문 구조 변경 시 연관된 필수 릴리스 프로그램이 릴리스 문서에 모두 포함되어 있는지 여부를 점검
- DAM의 전문구조 변경 시 DAM을 호출하는 SVC1, SVC2, BAM도 동시에 릴리스 필수

2) 릴리스 누락 점검의 어려움
- 전문구조가 변경된 프로그램의 컴파일 시점에 누락 여부가 발견되지 않음(DAM 컴파일 시 SVC 미컴파일 여부가 상관없음)
- 연관된 프로그램 호출 시점에 에러 발생(SVC 에서 DAM 호출 시 전문버전 불일치 에러)
- 운영 릴리스 직후에 호출이 없어 한동안 발견되지 않을 수 있음. 다른 개발자 담당 프로그램에도 영향을 줄 수 있음

3) 전문구조 변경 영향분석 방법
대상 확인시 점검결과 확인
- 변경한 전문구조 입력 후 분석을 실행
- 해당 전문구조 변경 시 릴리스 필요 프로그램 목록
- 각 프로그램별 현재 진행상태 조회 가능

4) 정기 릴리스 취합시 누락 점검
목록 이관시 누락점검 실시
- 목록 이관 버튼 클릭시 목록내 모든 문서 점검 시작
- 점검 완료 시 정기릴리스 확인 Grid로 이관 완료
대상확인시 점검결과 확인
- 비정상 붉은 버튼 클릭시 로그창 팝업
- 상세 로그확인을 통해 문제점 확인 가능
- 조치후 재점검 버튼으로 다시 점검 수행가능
- 점검후 붉은 비정상 버튼이 사라지면 변경담당자 확인 가능

5) 릴리스 누락 점검 방법
테스트 릴리스 후 누락점검
- 테스트 릴리스 후 문서들만 목록 조회 가능
- 정기, 비정기, 긴급 모두 가능
- 비정상 검출시 상세 로그 확인 및 조치 후 재점검 가능
- 시스템 부하방지를 위해 최대 5개 문서 동시 점검 가능

6) 릴리스 누락 점검 방법
- DAM의 요청(IN) 전문구조 변경시 (IN 버전 증가: 2 -> 3)
- 테스트 AP 서버에서 DAM, SVC1, SVC2의 Object File을 분석
- DAM 자체적 IN, OUT 버전과 SVC1, SVC2 컴파일시 참조한 DAM.h의 IN, OUT 버전이 일치한지 점검

전문구조 변경시 인터페이스 업체 공유 누락
1) 인터페이스 업체 공유 누락?
- 고정전문(FIXED)의 경우 BYTE 자릿수로 PARSING함
- [이름,성별] 전문구조를 [이름,주소,성별]로 바꾸었다면 장비 업체에도 공유해 개발 및 릴리스 일자를 맞추어야 함
- JSON의 경우 TAG 정보로 MAPPING함
- [이름,성별] 전문구조를 [이름,주소,성별]로 바꾸었다면 장비 업체에도 공유해 개발 및 릴리스 일자를 맞추어야 함

2) 인터페이스 전문 타입 확인
- XML 파일 배포 대상 컬럼중 채널명, 전문타입으로 업체 공유 필요여부 확인 가능
3) 인터페이스 업체 확인
- 연계시스템 관리에서 인터페이스, 담당자 정보 확인 가능

테스트 <-> 운영 형상 불일치
1) 테스트 <-> 운영 형상 불일치?
- 개발자1이 A 프로그램을 개발하여 운영에 릴리스할 때 개발자2가 B프로그램을 수정, 삭제하여 테스트까지만 변경해둔 경우 A프로그램 운영 릴리스후 A에서 B 호출하면 버전 불일치 에러 발생
- 테스트에서 A프로그램 컴파일시 B 프로그램 v2로 참조하게 됨. 운영릴리스 시 A 프로그램의 Binary 파일을 그대로 운영으로 이관함. 운영에서 A 프로그램이 아는 B 프로그램의 버전은 2이지만, B 프로그램의 현재 운영버전이 1이라 에러 발생
- 개발자가 A 프로그램을 테스트까지 릴리스 후 문서 전체를 삭제한 경우 테스트계 A 프로그램을 원복하지 않으면 A 프로그램 연관 프로그램에러 발생
- 개발자가 A 프로그램을 테스트까지만 릴리스후 프로그램 목록에서 삭제한 경우 테스트계 A 프로그램을 원복하지 않으면 A 프로그램연관 프로그램 에러 발생
- 불일치가 발생하는 이유? 소통 부재/오류, 무리한 요구사항, 로그 미확인

2) 개발중인 프로그램의 상하위 프로그램 상태 확인
- 내문서에 포함된 프로그램: 내 현재 문서 중 상,하위 프로그램 연관관계로 인해 운영릴리스시 장애가 발생할 수 있는 프로그램 목록
- 상,하위 연관프로그램: 좌측 프로그램과 연관되어 이슈가 될 수 있는 프로그램 목록
- 연관프로그램의 최종문서 정보: 연관프로그램들이 최종적으로 테스트 릴리스 된 문서의 최종상태를 확인가능, 점검 사유 컬럼 보기 버튼 클릭시 상세 검출 사유 및 조치 방안 확인 가능

